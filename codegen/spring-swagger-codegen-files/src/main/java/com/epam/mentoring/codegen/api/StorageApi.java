/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.epam.mentoring.codegen.api;

import com.epam.mentoring.codegen.model.Load;
import java.util.Map;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-27T10:51:38.148+03:00")

@Api(value = "storage", description = "the storage API")
public interface StorageApi {

    @ApiOperation(value = "Delete load by ID", notes = "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors", response = Void.class, tags={ "storage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Order not found", response = Void.class) })
    
    @RequestMapping(value = "/storage/load/{loadId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLoad( @Min(1)@ApiParam(value = "ID of the load that needs to be deleted",required=true ) @PathVariable("loadId") Long loadId);


    @ApiOperation(value = "Find load by ID", notes = "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions", response = Load.class, tags={ "storage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Load.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Load not found", response = Void.class) })
    
    @RequestMapping(value = "/storage/load/{loadId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Load> getLoadById( @Min(1) @Max(10)@ApiParam(value = "ID of file that needs to be fetched",required=true ) @PathVariable("loadId") Long loadId);


    @ApiOperation(value = "Returns file options by status", notes = "Returns a map of status codes to quantities", response = Integer.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class, responseContainer = "Map") })
    
    @RequestMapping(value = "/storage/option",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Map<String, Integer>> getOptions();


    @ApiOperation(value = " Load a file", notes = "", response = Load.class, tags={ "storage", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Load.class),
        @ApiResponse(code = 400, message = "Invalid Load", response = Void.class) })
    
    @RequestMapping(value = "/storage/load",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Load> load(@ApiParam(value = "load a file" ,required=true )  @Valid @RequestBody Load body);

}
