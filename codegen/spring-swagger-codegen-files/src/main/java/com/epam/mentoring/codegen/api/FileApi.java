/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.epam.mentoring.codegen.api;

import com.epam.mentoring.codegen.model.ModelApiResponse;
import org.springframework.core.io.Resource;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-27T10:51:38.148+03:00")

@Api(value = "file", description = "the file API")
public interface FileApi {

    @ApiOperation(value = "Add a new file to the storage", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/file",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addFile(@ApiParam(value = "File object that needs to be added to the store" ,required=true )  @Valid @RequestBody java.io.File body);


    @ApiOperation(value = "Deletes a file", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "File not found", response = Void.class) })
    
    @RequestMapping(value = "/file/{fileId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFile(@ApiParam(value = "File id to delete",required=true ) @PathVariable("fileId") Long fileId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds Files by status", notes = "Multiple status values can be provided with comma separated strings", response = java.io.File.class, responseContainer = "List", authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = java.io.File.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/file/findByStatus",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<java.io.File>> findFilesByStatus( @NotNull@ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, outdated") @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Finds Files by tags", notes = "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.", response = java.io.File.class, responseContainer = "List", authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = java.io.File.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid tag value", response = Void.class) })
    
    @RequestMapping(value = "/file/findByTags",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<java.io.File>> findFilesByTags( @NotNull@ApiParam(value = "Tags to filter by", required = true) @RequestParam(value = "tags", required = true) List<String> tags);


    @ApiOperation(value = "Find file by ID", notes = "Returns a single file", response = java.io.File.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = java.io.File.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "File not found", response = Void.class) })
    
    @RequestMapping(value = "/file/{fileId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<java.io.File> getFileById(@ApiParam(value = "ID of file to return",required=true ) @PathVariable("fileId") Long fileId);


    @ApiOperation(value = "Update an existing file", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "File not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/file",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateFile(@ApiParam(value = "File object that needs to be added to the store" ,required=true )  @Valid @RequestBody java.io.File body);


    @ApiOperation(value = "Updates a file in the store with form data", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/file/{fileId}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateFileWithForm(@ApiParam(value = "ID of file that needs to be updated",required=true ) @PathVariable("fileId") Long fileId,@ApiParam(value = "Updated name of the file") @RequestPart(value="name", required=false)  String name,@ApiParam(value = "Updated status of the file") @RequestPart(value="status", required=false)  String status);


    @ApiOperation(value = "uploads an image", notes = "", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "storage_auth", scopes = {
            @AuthorizationScope(scope = "write:files", description = "modify pfiles in your account"),
            @AuthorizationScope(scope = "read:files", description = "read your files")
            })
    }, tags={ "file", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class) })
    
    @RequestMapping(value = "/file/{fileId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadFile(@ApiParam(value = "ID of file to update",required=true ) @PathVariable("fileId") Long fileId,@ApiParam(value = "Additional data to pass to server") @RequestPart(value="additionalMetadata", required=false)  String additionalMetadata,@ApiParam(value = "file detail") @RequestPart("file") MultipartFile file);

}
